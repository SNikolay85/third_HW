git branch <name> - создание ветки
SNikolay - имя в глобальных настройках GIT
SNikolay85 - имя на GitHub

git branch - просмотр веток
git branch -d <name branch> - удаление локальной ветки
git branch --all - просмотр всех веток

git checkout <имя has-комита> - переход на указанный комит
git checkout <name branch> - переход на ветку
git checkout HEAD~1 - перемещение по комитам на 1 позицию вниз
git checkout --track origin/feature/metrika - создание локальной ветки и переключение на нее 
(в случае клонирования репозитория с этой веткой)
git checkout -b <name branch> - создание ветки и переход сразу на нее

git revert <хэш коммита> - создает копию нужного коммита



Создание удаленного репозитория:
1. В своем профиле GitHub  в правом верхнем углу нажимаем "+"
2. Пишем имя репозитория, он как правило должен называться так же как и наш локальный репозиторий
3. Проверяем, что выбрана точка рядом с Public и нажимаем Create repository
4. Копируем строку с записью git@github.com:SNikolay85/test.git
5. Далее в терминале набираем git remote add origin git@github.com:SNikolay85/test.git
6. Проверяем связь git remote -v
7. Далее отправляем файлы на удаленный репозиторий git push -u origin main
8. Теперь наш локальный репозиторий размешен на GitHub

git remote add origin git@github.com:SNikolay85/test.git
git remote add origin https://... - устанавливаем связь между локальным и удаленным репозиторием с помощью метки "origin"
git remote -v - просмотр связи с удаленным репозиторием
git remote remove origin - удаление связи с удаленным репозиторием

Первоначально для отправки изменений на удаленный репозиторий обязательно пишем полный путь:
git push -u origin main - флаг "-u" показывает, что связь устанавливается по умолчанию именно на этот удаленный репозиторий

Далее можно просто писать git push, НО если у нас несколько меток (н-р: origin, target и т.д.), то для связи с другой меткой
нужно заново набрать полностью git push -u target main

git push -u origin main - когда связь установлена можно сливать изменения на удаленный репозиторий
git push -u origin <name branch> -  заливка локальной ветки на репозиторий гитхаб (доп. ветку нужно заливать отдельно)
git push --all - отправка всех веток на удаленный репозиторий
git merge --no-ff <name branch> - слияние веток (основной и дополнительной)
git push (отправка на удаленный репозиторий если уже была установлена связь)

git pull - обновление локального репозитория из удаленного
(при командной разработке, всегда выполняем эту команду, перед началом работы)


git push --delete origin <name branch> - удаление ветки на удаленном репозитории
git tag -a v1.0 -m "Версия 1.0" - добавление тэга
git tag - просмотр тегов
git tag -a v1.0 -m "Версия 1.0" <commit id> -  теги можно прописывать уже после, указав id коммита
git push --tags - теги нужно отправлять оттдельно

git blame --<имя файла> - поиск по человеку сделавшему изменения

git reset <mode> <commit id> - откаты (mode: hard, soft, mixed(default))
git reset <mode> HEAD~<num> - перемещение на num шагов

git log --all - поиск по всем веткам
git log --oneline - удобный список комитов
git log --grep 'первые буквы имени..." - поиск комита по первым символам
git log -S 'строка' -p - поиск по куску кода
git log --oneline --graph - построение графов
git log --oneline --graph <name branch> - построение графа для конкретной ветки

git fetch <origin> - забирает изменения с удаленного репозитория на локальный (если они есть)

git init - создание локального репозитория
git status - просмотр состояния отслеживаемых файлов

git add <имя файла> - добавление файла в отслеживаемые
git add -A - добавления множества файлов в отслеживание
git commit -m "подпись комита" - создание комита

git rm --cached <название файла> - удаление из отслеживаемых


git commit --amend -m "название" - затирает последний комит и создает новый (применение: исправление названия последнего комита или добавление нового файла в последний комит)
git config --global --list - просмотр настроек

Регистрация ключа на GitHub:
1. Запускаем GitBush из меню ПУСК
2. ssh-keygen - запускаем эту команду, в процессе выполнения необходимо будет несколько раз нажать Enter до тех пор пока не сгенерируется код
3. Your public key has been saved in /c/Users/Администратор/.ssh/id_rsa.pub - из этой строки копируем .ssh/id_rsa.pub
4. cat ~/.ssh/id_rsa.pub - выполняем следующую команду
5. Копируем весь код, который выдала предыдущая команда
6. Переходим в свой профиль на GitHub, рядом со значком профиля в правом верхнем углу нажимаем стрелочку вниз и выбираем вкладку Settings
7. В левой части экрана выбираем SSH and GPG keys
8. В поле SSH keys нажимаем New SSH key
9. Пишем имя и вставляем в поле скопированный текст
10. У нас появляется свою ключ для конкретного компьютера

SNikolaY
SHA256:ZFBzPCfJST/oSdSdAv1pQaY1yloVZ0b6u4WWkpNcGA4

git clone <SSH код нужного репозитория> - копирование удаленного репозитория на локальный ПК

sourcetree  https://www.sourcetreeapp.com/  - программа для работы с GIT в графическом виде

для удаления репозитория с сервера гитхаб, необходимо перейти в нужный репозиторий. Далее настройки и пролистываем страницу до конца. В разделе "danger zone"
выбираем "delete this repository". В поле вводим название репозитория и удаляем.

git revert HEAD - удаляет изменения именно в последнем коммите

git branch -a - показывает какие ветки в локальном репозитории и какие в удаленном

git reset --hard HEAD~1 - точно удаляет последний коммит

Если нам нужно удалить коммиты в удаленном репозитории, то выполняем команду: git push -f

Если мне нужно создать новую ветку с исходными данными, то я должен выполнить команду: git branch <имя новой ветки>. 
  И тогда создастся новая ветка с данными, которые лежали в ветке из которой выполнялась команда.

Слияние веток: git merge --no-ff <имя ветки> - этой командой производится попытка слияния ветки <имя ветки> с той веткой, из которой была вызвана эта команда

Для переключения по коммитам, необходима команда: git checkout <хэш-коммита(достаточно первых нескольких символов)>


Для задачи с форком: Не нужно форкнутый репозиторий клонировать, поскольку по заданию у нас уже есть локальный репозиторий, который мы взяли из архива.
	мы просто связываем репозиторий взятый из архива с удаленным (форкнутым) с помощью команды: git remote add origin https://... (ссылка из гитхаба)
	Дополнение: перед связыванием проверить, нет ли уже каких-то связей: git remote -v.

После этого пушим данные на удаленный репозиторий: git push -u origin main (при этом у нас произойдет конфликт по заданию так задуманно)
Для решения конфликта делаем git pull origin main - при этом подскажет, где есть конфликт. Заходим в файл и исправляем этот конфликт.
Далее   - git add *
	- git commit -m "merging"
И снова отправляем снова на гитхаб: git push -u origin main